apiServer:
  enableAdmissionPlugins: "NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota,PersistentVolumeClaimResize,DefaultStorageClass,Priority,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook"
  featureGates: "TTLAfterFinished=true"
baseDomain: ""  # Customer base domain, generally of the form "<customer codename>.gigantic.io".
cloudConfig: ""  # Name of existing cloud-config secret in management cluster namespace.
cloudName: ""  # Name of cloud in cloud-config secret "cloud.yaml" value.
clusterDescription: ""  # Cluster description used in metadata.
clusterName: ""  # Name of cluster. Used as base name for all cluster resources in the management cluster.
controllerManager:
  featureGates: "ExpandPersistentVolumes=true,TTLAfterFinished=true"
dnsNameservers: []  # IPs of DNS nameservers to be used by the cluster machines (optional, will use OS defaults if not specified).
kubernetesVersion: ""  # Version of Kubernetes. If machine images are specified, this will only be used for metadata.
managementCluster: ""  # Name of cluster which owns this workload cluster.
organization: ""  # Organization which owns the cluster.

nodeCIDR: ""  # The OpenStack Subnet to be created.
externalNetworkID: ""  # UUID of external network (optional unless there are multiple external networks).
networkName: ""  # Existing network name. Ignored when nodeCIDR is set.
subnetName: ""  # Existing subnet name. Ignored when nodeCIDR is set.

sshTrustedUserCAKeys:
  # Taken from https://vault.operations.giantswarm.io/v1/ssh/public_key
  - "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIM4cvZ01fLmO9cJbWUj7sfF+NhECgy+Cl0bazSrZX7sU vault-ca@vault.operations.giantswarm.io"

oidc:
  issuerUrl: ""
  caFile: ""
  clientId: ""
  usernameClaim: ""
  groupsClaim: ""
  usernamePrefix: ""

ignition:
  enable: false

bastion:
  diskSize: 0  # Root volume disk size in GB. Ignored if bootFromVolume is false. Should be at least as large as the source image.
  flavor: ""  # Project-dependent flavor of bastion machine.
  image: ""  # Image name or root volume source UUID if bootFromVolume is true.
  bootFromVolume: false  # If true, machines will use a persistent root volume instead of an ephemeral volume.

controlPlane:
  availabilityZones: []  # Unique availability zones for control plane nodes. If specified, should have one item or one for each replica (optional).
  diskSize: 0  # Root volume disk size in GB. Ignored if bootFromVolume is false. Should be at least as large as the source image.
  flavor: ""  # Project-dependent flavor of control plane machines.
  image: ""  # Image name or root volume source UUID if bootFromVolume is true.
  replicas: 0  # Number of replicas in control plane. Should be an odd number.
  bootFromVolume: false  # If true, machines will use a persistent root volume instead of an ephemeral volume.
  etcd:
    imageRepository: "giantswarm"
    imageTag: 3.5.4-0-k8s
  resourceRatio: 8  # Ratio between node resources and apiserver resource requests.

nodeClasses: {}  # Class definitions for worker node pools. The "name" of the class is the key of the object. The properties may include "diskSize", "flavor", "image", and "bootFromVolume" as defined for control plane and bastion above. Example:
  # default:
  #   bootFromVolume: true
  #   diskSize: 50
  #   flavor: n1.medium
  #   image: ubuntu-2004-kube-v1.22.9

nodePools: {}  # Node pools that should exist for the cluster. Each node pool must refer to a class defined in nodeClasses above. Example:
  # us-dc-1:
  #   class: default # Node classes name (defined above)
  #   failureDomain: us-east-1 # OpenStack availability zones
  #   replicas: 2

# cluster-shared configuration
includeClusterResourceSet: "true"  # must be a string
# let's use the kubectl image defaults
kubectlImage: {}
